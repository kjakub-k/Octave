using SFB;
using System;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UIElements;
namespace KJakub.Octave.Editor.UI
{
    public class EditorPopupUI
    {
        private readonly VisualElement popupWindow = new();
        private TextField textInputField;
        private EnumField enumField;
        private Button acceptBtn = new() { text = "Accept" };
        private TaskCompletionSource<object> popupTcs;
        public EditorPopupUI(VisualElement root)
        {
            popupWindow = root.Q<VisualElement>("Popup");
            popupWindow.style.display = DisplayStyle.None;
            acceptBtn.clicked += OnAcceptButtonPress;
            popupWindow.Add(acceptBtn);
        }
        //TODO: all of the methods here were generated by chatgpt, I want to try out programming this myself
        private void OnAcceptButtonPress()
        {
            if (popupTcs == null || popupTcs.Task.IsCompleted)
                return;

            object result = null;

            if (textInputField != null)
            {
                result = textInputField.value;
            }
            else if (enumField != null)
            {
                result = enumField.value;
            }

            popupWindow.style.display = DisplayStyle.None;
            popupWindow.Clear();
            popupWindow.Add(acceptBtn);

            popupTcs.SetResult(result);
        }
        private async Task LoadWavAndSetResult(string filePath)
        {
            byte[] wavData = await Task.Run(() => System.IO.File.ReadAllBytes(filePath));
            AudioClip clip = ToAudioClip(wavData, System.IO.Path.GetFileNameWithoutExtension(filePath));
            popupTcs.SetResult(clip);
        }
        public async Task<T> CreatePopupAsync<T>()
        {
            popupTcs = new TaskCompletionSource<object>();

            Type type = typeof(T);

            popupWindow.style.display = DisplayStyle.Flex;

            if (type == typeof(int))
            {
                textInputField = new TextField("Enter an integer:");
                textInputField.value = "0";
                popupWindow.Insert(0, textInputField);
            }
            else if (type.IsEnum)
            {
                enumField = new EnumField("Choose:", (Enum)Enum.GetValues(type).GetValue(0));
                popupWindow.Insert(0, enumField);
            }
            else if (type == typeof(AudioClip))
            {
                var selectFileButton = new Button(() =>
                {
                    var paths = StandaloneFileBrowser.OpenFilePanel("Select WAV File", "", "wav", false);
                    if (paths.Length > 0)
                    {
                        string path = paths[0];
                        _ = LoadWavAndSetResult(path);
                    }
                })
                {
                    text = "Select WAV file"
                };

                popupWindow.Insert(0, selectFileButton);
            }
            else
            {
                throw new NotSupportedException($"Type {typeof(T).Name} not supported");
            }

            object result = await popupTcs.Task;
            return (T)Convert.ChangeType(result, typeof(T));
        }
        private AudioClip ToAudioClip(byte[] wavFileBytes, string clipName = "song")
        {
            int headerSize = 44;

            if (wavFileBytes == null || wavFileBytes.Length <= headerSize)
                throw new ArgumentException("Invalid WAV file data");

            int sampleRate = BitConverter.ToInt32(wavFileBytes, 24);
            short channels = BitConverter.ToInt16(wavFileBytes, 22);
            short bitsPerSample = BitConverter.ToInt16(wavFileBytes, 34);

            if (bitsPerSample != 16)
                throw new NotSupportedException("Only 16 bit WAV files are supported");

            int dataSize = wavFileBytes.Length - headerSize;
            int sampleCount = dataSize / 2;
            float[] audioData = new float[sampleCount];

            for (int i = 0; i < sampleCount; i++)
            {
                short sample = BitConverter.ToInt16(wavFileBytes, headerSize + i * 2);
                audioData[i] = sample / 32768f;
            }

            AudioClip audioClip = AudioClip.Create(clipName, sampleCount / channels, channels, sampleRate, false);
            audioClip.SetData(audioData, 0);

            return audioClip;
        }
    }
}